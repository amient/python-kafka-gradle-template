buildscript {
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "gradle.plugin.com.github.maiflai:gradle-scalatest:0.19"
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.2'
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.8.2"
        classpath "gradle.plugin.com.linkedin.pygradle:pygradle-plugin:0.7.18"
    }
}

group = 'io.amient.examples'

ext {
    encoding = "UTF-8"

    javaVersion = '1.8'
    junitVersion = '4.12'
    typesafeConfigVersion = '1.3.0'

    scalaVersion = '2.11.8'
    scalaTestVersion = '3.0.5'
    scalaCheckVersion = '1.13.5'
    baseScalaVersion = scalaVersion.split("\\.\\d+\$")[0]

    kafkaVersion = '1.0.0'
    baseKafkaVersion = kafkaVersion.split("\\.\\d+\$")[0]

    avroVersion = '1.8.2'
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.8'
}

allprojects {

    task compile {}

    plugins.withType(JavaPlugin).whenPluginAdded {
        compile.dependsOn compileJava
        compile.dependsOn compileTestJava
        sourceCompatibility = rootProject.ext.javaVersion
        libsDirName = 'lib'
    }

    plugins.withType(ScalaPlugin).whenPluginAdded {
        compile.dependsOn compileScala
        compile.dependsOn compileTestScala

        dependencies {
            compile group: 'org.scala-lang', name: 'scala-library', version: scalaVersion
            testCompile group: 'org.scalatest', name: 'scalatest_' + baseScalaVersion, version: scalaTestVersion
            testCompile group: 'org.scalacheck', name: 'scalacheck_' + baseScalaVersion, version: scalaCheckVersion
        }

        repositories {
            mavenLocal()
            jcenter()
            maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
            maven { url "https://oss.sonatype.org/content/repositories/releases" }
            maven { url "https://repository.cloudera.com/artifactory/cloudera-repos/" }
        }
        plugins.withType(com.avast.gradle.dockercompose.DockerComposePlugin).whenPluginAdded {
            sourceSets {
                integrationTest {
                    resources.srcDir file("src/it/resources")
                    scala.srcDir file("src/it/scala")
                    compileClasspath += main.output
                    runtimeClasspath += main.output
                }
            }

            configurations {
                integrationTestCompile.extendsFrom compile
            }

            task ittest(dependsOn: ['compileIntegrationTestScala'], type: JavaExec) {
                main = 'org.scalatest.tools.Runner'
                args = ['-R', "${project.buildDir}/classes/scala/integrationTest", '-P1', '-o', '-h', "${project.buildDir}/ittest-results", '-u', "${project.buildDir}/ittest-results"]
                classpath = sourceSets.integrationTest.runtimeClasspath
                mustRunAfter tasks.test
                inputs.files(sourceSets.integrationTest.compileClasspath)
                outputs.dir(file("${project.buildDir}/ittest-results"))
            }

            dependencies {
                integrationTestRuntime 'org.pegdown:pegdown:1.6.0'
                integrationTestCompile project(':common:ittestlib')
                integrationTestCompile group: 'org.scalatest', name: 'scalatest_' + baseScalaVersion, version: scalaTestVersion
            }

            dockerCompose.isRequiredBy(ittest)

            composeUp {
                inputs.files(sourceSets.integrationTest.compileClasspath)
                outputs.file(file("${project.buildDir}/ittest-started"))
                doLast { file("${project.buildDir}/ittest-started").text = new Date().format('yyyyMMddHHmmss') }
            }
            composeDown {
                inputs.file(file("${project.buildDir}/ittest-started"))
                outputs.file(file("${project.buildDir}/ittest-finished"))
                doLast { file("${project.buildDir}/ittest-finished").text = new Date().format('yyyyMMddHHmmss') }
            }

            //the following 2 tasks are for when you want to run some it specs in IDE
            task up(type: Exec, dependsOn: ['composeUp']) {
                outputs.upToDateWhen { false }
                commandLine = ['docker', 'ps']
            }

            task down(type: Exec, dependsOn: ['composeDown']) {
                outputs.upToDateWhen { false }
                commandLine = ['docker', 'ps']
            }

            compile.dependsOn compileIntegrationTestScala

            build.dependsOn ittest
        }
    }

    plugins.withType(com.github.maiflai.ScalaTestPlugin).whenPluginAdded {
        dependencies {
            testRuntime 'org.pegdown:pegdown:1.6.0'
        }

        test {
            reports {
                junitXml.enabled true
                junitXml.destination file("${project.buildDir}/test-results")
                html.destination file("${project.buildDir}/test-results")
            }
        }
    }

    plugins.withType(com.linkedin.gradle.python.plugin.PythonPlugin).whenPluginAdded {
        def random = new Random()
        def ZK_PORT = (random.nextInt(30000) + 1024).toString()
        def KAFKA_PORT = (random.nextInt(30000) + 1024).toString()
        def SCHEMA_REGISTRY_PORT = (random.nextInt(30000) + 1024).toString()

        python {
            testDir = "test"
            pythonEnvironment = [
                    'KAFKA_PORT'          : KAFKA_PORT,
                    'SCHEMA_REGISTRY_PORT': SCHEMA_REGISTRY_PORT
            ]
            details {
//                pythonVersion = '3.6'
                systemPythonInterpreter = file("/usr/local/bin/python3.6")
            }
        }

        tasks.flake8.enabled = false

        repositories {
            pyGradlePyPi()
            ivy {
                url System.getProperty("user.home") + "/pypi-ivy"
                layout 'pattern', {
                    artifact '[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]'
                    ivy '[organisation]/[module]/[revision]/[module]-[revision].ivy'
                }
            }
        }

        dependencies {
            python 'pypi:requests:2.18.4'
        }

        task test(type: com.linkedin.gradle.python.tasks.PyTestTask)

        plugins.withType(com.avast.gradle.dockercompose.DockerComposePlugin).whenPluginAdded {
            dockerCompose.isRequiredBy(test)
            dockerCompose {
                projectName = project.name
                stopContainers = true
                useComposeFiles = [project.rootProject.rootDir.toPath().resolve('docker-compose.yml')]
                startedServices = ['zookeeper', 'kafka', 'schema_registry']
                environment.put 'ZK_PORT', ZK_PORT
                environment.put 'KAFKA_PORT', KAFKA_PORT
                environment.put 'SCHEMA_REGISTRY_PORT', SCHEMA_REGISTRY_PORT
            }
        }
    }

    tasks.withType(ScalaCompile) {
        scalaCompileOptions.additionalParameters = ["-feature",
                                                    "-target:jvm-" + javaVersion,
                                                    "-encoding", rootProject.encoding,
                                                    "-unchecked",
                                                    "-deprecation",
                                                    "-Xfuture",
                                                    "-Yno-adapted-args",
                                                    "-Ywarn-dead-code",
                                                    "-Ywarn-numeric-widen",
                                                    "-Ywarn-unused"]
    }
}
