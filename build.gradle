buildscript {
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.8.2"
        classpath "gradle.plugin.com.linkedin.pygradle:pygradle-plugin:0.7.18"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.8'
}

allprojects {

    plugins.withType(com.linkedin.gradle.python.plugin.PythonPlugin).whenPluginAdded {
        def random = new Random()
        def ZK_PORT = (random.nextInt(30000) + 1024).toString()
        def KAFKA_PORT = (random.nextInt(30000) + 1024).toString()
        def SCHEMA_REGISTRY_PORT = (random.nextInt(30000) + 1024).toString()

        python {
            srcDir = 'src/main'
            testDir = 'src/test'
            details {
                pythonVersion = '3.6'
            }
            pythonEnvironment = [
                    'KAFKA_BOOTSTRAP_SERVERS'   : 'PLAINTEXT://localhost:' + KAFKA_PORT,
                    'SCHEMA_REGISTRY_URL'       : 'http://localhost:' + SCHEMA_REGISTRY_PORT
            ]
        }

        tasks.flake8.enabled = false

        repositories {
            pyGradlePyPi()
            ivy {
                url System.getProperty("user.home") + "/pypi-ivy"
                layout 'pattern', {
                    artifact '[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]'
                    ivy '[organisation]/[module]/[revision]/[module]-[revision].ivy'
                }
            }
        }

        dependencies {
            python 'pypi:requests:2.18.4'
            python 'pypi:avro-python3:1.8.2'
            python ('pypi:confluent-kafka:0.11.5') {
                exclude module: 'futures'
                exclude module: 'enum34'
            }

        }

        task test(type: com.linkedin.gradle.python.tasks.PyTestTask)

        plugins.withType(com.avast.gradle.dockercompose.DockerComposePlugin).whenPluginAdded {
            dockerCompose.isRequiredBy(test)
            dockerCompose.isRequiredBy(pytest)
            dockerCompose {
                projectName = project.name
                stopContainers = true
                useComposeFiles = [project.rootProject.rootDir.toPath().resolve('docker-compose.yml')]
                startedServices = ['zookeeper', 'kafka', 'schema_registry']
                environment.put 'ZK_PORT', ZK_PORT
                environment.put 'KAFKA_PORT', KAFKA_PORT
                environment.put 'SCHEMA_REGISTRY_PORT', SCHEMA_REGISTRY_PORT
            }
        }
    }

}
